//package com.bookstore.web.repository;
//
//import com.bookstore.web.entity.NguoiDung;
//import org.springframework.data.jpa.repository.JpaRepository;
//
//import org.springframework.data.jpa.repository.Query;
//import org.springframework.data.repository.query.Param;
//import org.springframework.stereotype.Repository;
//
//import java.time.LocalDateTime;
//import java.util.Optional;
//
//@Repository
//public interface NguoiDungRepository extends JpaRepository<NguoiDung, Integer> {
//
//    @Query("SELECT COUNT(n) FROM NguoiDung n WHERE n.vaiTro = :vaiTro")
//    long countByVaiTro(@Param("vaiTro") String vaiTro);
//
//    @Query("SELECT COUNT(n) FROM NguoiDung n WHERE n.createdAt > :date AND n.vaiTro = 'USER'")
//    long countByCreatedAtAfter(@Param("date") LocalDateTime date);
//
//    Optional<NguoiDung> findByTaiKhoan(String taiKhoan);
//    
//    NguoiDung findByTaiKhoanAndMatKhau(String taiKhoan, String matKhau);
//    
//    @Query("SELECT CASE WHEN COUNT(n) > 0 THEN true ELSE false END FROM NguoiDung n WHERE n.taiKhoan = :taiKhoan")
//    boolean existsByTaiKhoan(@Param("taiKhoan") String taiKhoan);
//}

package com.bookstore.web.repository;

import com.bookstore.web.entity.NguoiDung;
import org.springframework.data.jpa.repository.*;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface NguoiDungRepository extends JpaRepository<NguoiDung, Integer> {

	// üîπ ƒê·∫øm s·ªë ng∆∞·ªùi d√πng theo vai tr√≤ (USER, ADMIN, ...)
	@Query("SELECT COUNT(n) FROM NguoiDung n WHERE n.vaiTro = :vaiTro")
	long countByVaiTro(@Param("vaiTro") String vaiTro);

	// üîπ ƒê·∫øm s·ªë ng∆∞·ªùi d√πng ƒëƒÉng k√Ω sau m·ªôt th·ªùi ƒëi·ªÉm nh·∫•t ƒë·ªãnh (ch·ªâ t√≠nh USER)
	@Query("SELECT COUNT(n) FROM NguoiDung n WHERE n.ngayTao > :date AND n.vaiTro = 'USER'")
	long countByCreatedAtAfter(@Param("date") LocalDateTime date);

	// üîπ T√¨m ng∆∞·ªùi d√πng theo t√†i kho·∫£n
	@Query("SELECT n FROM NguoiDung n WHERE n.taiKhoan = :taiKhoan")
	Optional<NguoiDung> findByTaiKhoan(@Param("taiKhoan") String taiKhoan);

	// üîπ ƒêƒÉng nh·∫≠p: t√¨m ng∆∞·ªùi d√πng theo t√†i kho·∫£n v√† m·∫≠t kh·∫©u
	NguoiDung findByTaiKhoanAndMatKhau(String taiKhoan, String matKhau);

	// üîπ Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a (d√πng cho ƒëƒÉng k√Ω)
	@Query("SELECT CASE WHEN COUNT(n) > 0 THEN true ELSE false END FROM NguoiDung n WHERE n.taiKhoan = :taiKhoan")
	boolean existsByTaiKhoan(@Param("taiKhoan") String taiKhoan);

	// üîπ L·∫•y danh s√°ch ng∆∞·ªùi d√πng theo vai tr√≤
	@Query("SELECT n FROM NguoiDung n WHERE n.vaiTro = :vaiTro")
	List<NguoiDung> findByVaiTro(@Param("vaiTro") String vaiTro);

	// üîπ L·∫•y t·∫•t c·∫£ kh√°ch h√†ng (vai tr√≤ USER)
	@Query("SELECT n FROM NguoiDung n WHERE n.vaiTro = 'USER'")
	List<NguoiDung> findAllCustomers();

	// üîπ T√¨m ki·∫øm kh√°ch h√†ng theo t√™n, t√†i kho·∫£n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
	@Query("""
			    SELECT n FROM NguoiDung n
			    WHERE n.vaiTro = 'USER'
			    AND (
			        LOWER(n.hoTen) LIKE LOWER(CONCAT('%', :keyword, '%'))
			        OR LOWER(n.taiKhoan) LIKE LOWER(CONCAT('%', :keyword, '%'))
			        OR LOWER(n.sdt) LIKE LOWER(CONCAT('%', :keyword, '%'))
			    )
			""")
	List<NguoiDung> searchCustomers(@Param("keyword") String keyword);

//	// ƒê·∫øm s·ªë ng∆∞·ªùi d√πng theo vai tr√≤
//	long countByVaiTro(String vaiTro);

	// ƒê·∫øm s·ªë ng∆∞·ªùi d√πng t·∫°o m·ªõi trong kho·∫£ng th·ªùi gian
	@Query("SELECT COUNT(n) FROM NguoiDung n WHERE n.ngayTao BETWEEN :from AND :to")
	long countByNgayTaoBetween(@Param("from") LocalDateTime from, @Param("to") LocalDateTime to);

	// ‚úÖ T·ªïng s·ªë kh√°ch h√†ng ƒëƒÉng k√Ω (vai tr√≤ USER)
	@Query("SELECT COUNT(n) FROM NguoiDung n WHERE n.vaiTro = 'USER'")
	long countAllUsers();

	// ‚úÖ T·ªïng kh√°ch h√†ng ƒëƒÉng k√Ω trong kho·∫£ng th·ªùi gian
	@Query("SELECT COUNT(n) FROM NguoiDung n "
			+ "WHERE n.vaiTro = 'USER' AND n.ngayTao BETWEEN :startDate AND :endDate")
	long countRegisteredBetween(@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);
}
