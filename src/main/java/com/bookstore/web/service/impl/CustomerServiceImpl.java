//package com.bookstore.web.service.impl;
//
//import com.bookstore.web.entity.DonHang;
//import com.bookstore.web.entity.NguoiDung;
//import com.bookstore.web.repository.DonHangRepository;
//import com.bookstore.web.repository.NguoiDungRepository;
//import com.bookstore.web.service.CustomerService;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.data.domain.*;
//import org.springframework.stereotype.Service;
//
//import java.util.*;
//import java.util.stream.Collectors;
//
//@Service
//public class CustomerServiceImpl implements CustomerService {
//
//    private final DonHangRepository donHangRepository;
//    private final NguoiDungRepository nguoiDungRepository;
//
//    @Autowired
//    public CustomerServiceImpl(DonHangRepository donHangRepository, NguoiDungRepository nguoiDungRepository) {
//        this.donHangRepository = donHangRepository;
//        this.nguoiDungRepository = nguoiDungRepository;
//    }
//
//    @Override
//    public List<NguoiDung> getCustomersWithOrders() {
//        return donHangRepository.findAllCustomersWithOrders();
//    }
//
//    @Override
//    public List<DonHang> getOrdersByCustomerId(Integer maTK) {
//        return donHangRepository.findByMaTK(maTK);
//    }
//
//    @Override
//    public Page<Map<String, Object>> searchAndSortCustomersPaged(String keyword, String sort, Pageable pageable) {
//        // ‚úÖ L·∫•y t·∫•t c·∫£ kh√°ch h√†ng ƒë√£ t·ª´ng mua h√†ng
//        List<NguoiDung> customers = donHangRepository.findAllCustomersWithOrders();
//
//        // ‚úÖ T√≠nh t·ªïng chi ti√™u & s·ªë ƒë∆°n h√†ng cho t·ª´ng kh√°ch
//        List<Map<String, Object>> data = customers.stream()
//                .map(c -> {
//                    List<DonHang> orders = donHangRepository.findByMaTK(c.getMaTK());
//                    double totalSpent = orders.stream().mapToDouble(DonHang::getTongTien).sum();
//                    int orderCount = orders.size();
//
//                    Map<String, Object> map = new HashMap<>();
//                    map.put("maTK", c.getMaTK());
//                    map.put("hoTen", c.getHoTen());
//                    map.put("taiKhoan", c.getTaiKhoan());
//                    map.put("sdt", c.getSdt());
//                    map.put("diaChi", c.getDiaChi());
//                    map.put("tongChiTieu", totalSpent);
//                    map.put("soDon", orderCount); // ‚úÖ ƒë·ªïi l·∫°i key ƒë·ªÉ kh·ªõp Thymeleaf
//                    return map;
//                })
//                .filter(m -> keyword == null || keyword.isEmpty()
//                        || m.get("hoTen").toString().toLowerCase().contains(keyword.toLowerCase())
//                        || m.get("taiKhoan").toString().toLowerCase().contains(keyword.toLowerCase())
//                        || m.get("sdt").toString().toLowerCase().contains(keyword.toLowerCase())
//                        || m.get("diaChi").toString().toLowerCase().contains(keyword.toLowerCase()))
//                .collect(Collectors.toList());
//
//        // ‚úÖ S·∫Øp x·∫øp linh ho·∫°t
//        Comparator<Map<String, Object>> comparator;
//        switch (sort) {
//            case "chiTieuAsc" -> comparator = Comparator.comparingDouble(c -> (Double) c.get("tongChiTieu"));
//            case "chiTieuDesc" -> comparator = Comparator.comparingDouble((Map<String, Object> c) -> (Double) c.get("tongChiTieu")).reversed();
//            case "soDonAsc" -> comparator = Comparator.comparingInt(c -> (Integer) c.get("soDon"));
//            case "soDonDesc" -> comparator = Comparator.comparingInt((Map<String, Object> c) -> (Integer) c.get("soDon")).reversed();
//            default -> comparator = Comparator.comparing(c -> c.get("hoTen").toString());
//        }
//        data.sort(comparator);
//
//        // ‚úÖ Ph√¢n trang
//        int start = (int) pageable.getOffset();
//        int end = Math.min(start + pageable.getPageSize(), data.size());
//        List<Map<String, Object>> pagedData = data.subList(start, end);
//
//        return new PageImpl<>(pagedData, pageable, data.size());
//    }
//}

//package com.bookstore.web.service.impl;
//
//import com.bookstore.web.entity.DonHang;
//import com.bookstore.web.entity.NguoiDung;
//import com.bookstore.web.repository.DonHangRepository;
//import com.bookstore.web.repository.NguoiDungRepository;
//import com.bookstore.web.service.CustomerService;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.data.domain.*;
//import org.springframework.stereotype.Service;
//
//import java.util.*;
//import java.util.stream.Collectors;
//
//@Service
//public class CustomerServiceImpl implements CustomerService {
//
//    private final DonHangRepository donHangRepository;
//    private final NguoiDungRepository nguoiDungRepository;
//
//    @Autowired
//    public CustomerServiceImpl(DonHangRepository donHangRepository, NguoiDungRepository nguoiDungRepository) {
//        this.donHangRepository = donHangRepository;
//        this.nguoiDungRepository = nguoiDungRepository;
//    }
//
//    /**
//     * ‚úÖ L·∫•y danh s√°ch kh√°ch h√†ng ƒë√£ t·ª´ng ƒë·∫∑t h√†ng
//     */
//    @Override
//    public List<NguoiDung> getCustomersWithOrders() {
//        return donHangRepository.findAllCustomersWithOrders();
//    }
//
//    /**
//     * ‚úÖ L·∫•y danh s√°ch ƒë∆°n h√†ng theo m√£ t√†i kho·∫£n (userId)
//     */
//    @Override
//    public List<DonHang> getOrdersByCustomerId(Integer maTK) {
//        return donHangRepository.findByNguoiDung_IdOrderByNgayDatDesc(maTK);
//    }
//
//    /**
//     * ‚úÖ T√¨m ki·∫øm + s·∫Øp x·∫øp + ph√¢n trang danh s√°ch kh√°ch h√†ng ƒë√£ mua h√†ng
//     */
//    @Override
//    public Page<Map<String, Object>> searchAndSortCustomersPaged(String keyword, String sort, Pageable pageable) {
//        // üîπ L·∫•y t·∫•t c·∫£ kh√°ch h√†ng ƒë√£ c√≥ ƒë∆°n h√†ng
//        List<NguoiDung> customers = donHangRepository.findAllCustomersWithOrders();
//
//        // üîπ Chu·∫©n b·ªã d·ªØ li·ªáu th·ªëng k√™
//        List<Map<String, Object>> data = customers.stream()
//                .map(c -> {
//                    Integer id = c.getId(); // ‚ö†Ô∏è S·ª≠a l·∫°i n·∫øu t√™n kh√°c (vd: getMaNguoiDung())
//                    List<DonHang> orders = donHangRepository.findByNguoiDung_IdOrderByNgayDatDesc(id);
//
//                    double totalSpent = orders.stream()
//                            .mapToDouble(d -> d.getTongTien().doubleValue()) // ‚úÖ chuy·ªÉn BigDecimal -> double
//                            .sum();
//                    int orderCount = orders.size();
//
//                    Map<String, Object> map = new HashMap<>();
//                    map.put("maTK", id);
//                    map.put("hoTen", c.getHoTen());
//                    map.put("taiKhoan", c.getTaiKhoan());
//                    map.put("sdt", c.getSdt());
//                    map.put("diaChi", c.getDiaChi());
//                    map.put("tongChiTieu", totalSpent);
//                    map.put("soDon", orderCount);
//                    return map;
//                })
//                .filter(m -> keyword == null || keyword.isEmpty()
//                        || m.get("hoTen").toString().toLowerCase().contains(keyword.toLowerCase())
//                        || m.get("taiKhoan").toString().toLowerCase().contains(keyword.toLowerCase())
//                        || m.get("sdt").toString().toLowerCase().contains(keyword.toLowerCase())
//                        || m.get("diaChi").toString().toLowerCase().contains(keyword.toLowerCase()))
//                .collect(Collectors.toList());
//
//        // üîπ S·∫Øp x·∫øp theo y√™u c·∫ßu
//        Comparator<Map<String, Object>> comparator;
//        switch (sort) {
//            case "chiTieuAsc" ->
//                    comparator = Comparator.comparingDouble(c -> (Double) c.get("tongChiTieu"));
//            case "chiTieuDesc" ->
//                    comparator = Comparator.comparingDouble((Map<String, Object> c) -> (Double) c.get("tongChiTieu")).reversed();
//            case "soDonAsc" ->
//                    comparator = Comparator.comparingInt(c -> (Integer) c.get("soDon"));
//            case "soDonDesc" ->
//                    comparator = Comparator.comparingInt((Map<String, Object> c) -> (Integer) c.get("soDon")).reversed();
//            default ->
//                    comparator = Comparator.comparing(c -> c.get("hoTen").toString(), String.CASE_INSENSITIVE_ORDER);
//        }
//        data.sort(comparator);
//
//        // üîπ Ph√¢n trang
//        int start = (int) pageable.getOffset();
//        int end = Math.min(start + pageable.getPageSize(), data.size());
//        List<Map<String, Object>> pagedData = data.subList(start, end);
//
//        return new PageImpl<>(pagedData, pageable, data.size());
//    }
//}


package com.bookstore.web.service.impl;

import com.bookstore.web.entity.DonHang;
import com.bookstore.web.entity.NguoiDung;
import com.bookstore.web.repository.DonHangRepository;
import com.bookstore.web.repository.NguoiDungRepository;
import com.bookstore.web.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class CustomerServiceImpl implements CustomerService {

    private final DonHangRepository donHangRepository;
    private final NguoiDungRepository nguoiDungRepository;

    @Autowired
    public CustomerServiceImpl(DonHangRepository donHangRepository, NguoiDungRepository nguoiDungRepository) {
        this.donHangRepository = donHangRepository;
        this.nguoiDungRepository = nguoiDungRepository;
    }

    /**
     * ‚úÖ L·∫•y danh s√°ch kh√°ch h√†ng ƒë√£ t·ª´ng ƒë·∫∑t h√†ng
     */
    @Override
    public List<NguoiDung> getCustomersWithOrders() {
        return donHangRepository.findAllCustomersWithOrders();
    }

    /**
     * ‚úÖ L·∫•y danh s√°ch ƒë∆°n h√†ng theo m√£ t√†i kho·∫£n (userId)
     */
    @Override
    public List<DonHang> getOrdersByCustomerId(Integer maTK) {
        return donHangRepository.findByNguoiDung_IdOrderByNgayDatDesc(maTK);
    }

    /**
     * ‚úÖ T√¨m ki·∫øm + s·∫Øp x·∫øp + ph√¢n trang danh s√°ch kh√°ch h√†ng ƒë√£ mua h√†ng
     */
    @Override
    public Page<Map<String, Object>> searchAndSortCustomersPaged(String keyword, String sort, Pageable pageable) {
        // 1Ô∏è‚É£ L·∫•y t·∫•t c·∫£ kh√°ch USER
        List<NguoiDung> allCustomers = nguoiDungRepository.findAllCustomers();

        // 2Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu th·ªëng k√™
        List<Map<String, Object>> data = allCustomers.stream()
                .map(c -> {
                    Integer id = c.getId();
                    List<DonHang> orders = donHangRepository.findByNguoiDung_IdOrderByNgayDatDesc(id);

                    // T·ªïng chi ti√™u
                    double totalSpent = orders.stream()
                            .mapToDouble(d -> d.getTongTien() != null ? d.getTongTien().doubleValue() : 0)
                            .sum();

                    int orderCount = orders != null ? orders.size() : 0;

                    Map<String, Object> map = new HashMap<>();
                    map.put("maTK", id);
                    map.put("hoTen", c.getHoTen() != null ? c.getHoTen() : "");
                    map.put("taiKhoan", c.getTaiKhoan() != null ? c.getTaiKhoan() : "");
                    map.put("sdt", c.getSdt() != null ? c.getSdt() : "");
                    map.put("diaChi", c.getDiaChi() != null ? c.getDiaChi() : "");
                    map.put("tongChiTieu", totalSpent); // lu√¥n >= 0
                    map.put("soDon", orderCount);        // lu√¥n >= 0
                    return map;
                })
                // 3Ô∏è‚É£ Filter an to√†n
                .filter(m -> {
                    if (keyword == null || keyword.isEmpty()) return true;
                    String kw = keyword.toLowerCase();
                    return Optional.ofNullable(m.get("hoTen")).map(Object::toString).orElse("").toLowerCase().contains(kw)
                            || Optional.ofNullable(m.get("taiKhoan")).map(Object::toString).orElse("").toLowerCase().contains(kw)
                            || Optional.ofNullable(m.get("sdt")).map(Object::toString).orElse("").toLowerCase().contains(kw)
                            || Optional.ofNullable(m.get("diaChi")).map(Object::toString).orElse("").toLowerCase().contains(kw);
                })
                .collect(Collectors.toList());

        // 4Ô∏è‚É£ S·∫Øp x·∫øp
        Comparator<Map<String, Object>> comparator;
        switch (sort) {
            case "chiTieuAsc" -> comparator = Comparator.comparingDouble(c -> (Double) c.get("tongChiTieu"));
            case "chiTieuDesc" -> comparator = Comparator.comparingDouble((Map<String, Object> c) -> (Double) c.get("tongChiTieu")).reversed();
            case "soDonAsc" -> comparator = Comparator.comparingInt(c -> (Integer) c.get("soDon"));
            case "soDonDesc" -> comparator = Comparator.comparingInt((Map<String, Object> c) -> (Integer) c.get("soDon")).reversed();
            default -> comparator = Comparator.comparing(c -> c.get("hoTen").toString(), String.CASE_INSENSITIVE_ORDER);
        }
        data.sort(comparator);

        // 5Ô∏è‚É£ Ph√¢n trang
        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), data.size());
        List<Map<String, Object>> pagedData = start <= end ? data.subList(start, end) : new ArrayList<>();

        return new PageImpl<>(pagedData, pageable, data.size());
    }

}

